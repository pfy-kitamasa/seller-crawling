// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/panforyou/seller-finding/go/ent/website"
)

// WebsiteCreate is the builder for creating a Website entity.
type WebsiteCreate struct {
	config
	mutation *WebsiteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WebsiteCreate) SetCreatedAt(t time.Time) *WebsiteCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WebsiteCreate) SetNillableCreatedAt(t *time.Time) *WebsiteCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WebsiteCreate) SetUpdatedAt(t time.Time) *WebsiteCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WebsiteCreate) SetNillableUpdatedAt(t *time.Time) *WebsiteCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetKey sets the "key" field.
func (wc *WebsiteCreate) SetKey(s string) *WebsiteCreate {
	wc.mutation.SetKey(s)
	return wc
}

// SetURLTemplate sets the "url_template" field.
func (wc *WebsiteCreate) SetURLTemplate(s string) *WebsiteCreate {
	wc.mutation.SetURLTemplate(s)
	return wc
}

// SetAllowDomains sets the "allow_domains" field.
func (wc *WebsiteCreate) SetAllowDomains(s []string) *WebsiteCreate {
	wc.mutation.SetAllowDomains(s)
	return wc
}

// SetLatestVisitURL sets the "latest_visit_url" field.
func (wc *WebsiteCreate) SetLatestVisitURL(s string) *WebsiteCreate {
	wc.mutation.SetLatestVisitURL(s)
	return wc
}

// SetNillableLatestVisitURL sets the "latest_visit_url" field if the given value is not nil.
func (wc *WebsiteCreate) SetNillableLatestVisitURL(s *string) *WebsiteCreate {
	if s != nil {
		wc.SetLatestVisitURL(*s)
	}
	return wc
}

// SetMaxPage sets the "max_page" field.
func (wc *WebsiteCreate) SetMaxPage(i int) *WebsiteCreate {
	wc.mutation.SetMaxPage(i)
	return wc
}

// SetNillableMaxPage sets the "max_page" field if the given value is not nil.
func (wc *WebsiteCreate) SetNillableMaxPage(i *int) *WebsiteCreate {
	if i != nil {
		wc.SetMaxPage(*i)
	}
	return wc
}

// Mutation returns the WebsiteMutation object of the builder.
func (wc *WebsiteCreate) Mutation() *WebsiteMutation {
	return wc.mutation
}

// Save creates the Website in the database.
func (wc *WebsiteCreate) Save(ctx context.Context) (*Website, error) {
	var (
		err  error
		node *Website
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WebsiteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WebsiteCreate) SaveX(ctx context.Context) *Website {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WebsiteCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WebsiteCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WebsiteCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := website.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := website.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.MaxPage(); !ok {
		v := website.DefaultMaxPage
		wc.mutation.SetMaxPage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WebsiteCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := wc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "key"`)}
	}
	if _, ok := wc.mutation.URLTemplate(); !ok {
		return &ValidationError{Name: "url_template", err: errors.New(`ent: missing required field "url_template"`)}
	}
	if _, ok := wc.mutation.MaxPage(); !ok {
		return &ValidationError{Name: "max_page", err: errors.New(`ent: missing required field "max_page"`)}
	}
	return nil
}

func (wc *WebsiteCreate) sqlSave(ctx context.Context) (*Website, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *WebsiteCreate) createSpec() (*Website, *sqlgraph.CreateSpec) {
	var (
		_node = &Website{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: website.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: website.FieldID,
			},
		}
	)
	_spec.OnConflict = wc.conflict
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: website.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: website.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: website.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := wc.mutation.URLTemplate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: website.FieldURLTemplate,
		})
		_node.URLTemplate = value
	}
	if value, ok := wc.mutation.AllowDomains(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: website.FieldAllowDomains,
		})
		_node.AllowDomains = value
	}
	if value, ok := wc.mutation.LatestVisitURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: website.FieldLatestVisitURL,
		})
		_node.LatestVisitURL = value
	}
	if value, ok := wc.mutation.MaxPage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: website.FieldMaxPage,
		})
		_node.MaxPage = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Website.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebsiteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (wc *WebsiteCreate) OnConflict(opts ...sql.ConflictOption) *WebsiteUpsertOne {
	wc.conflict = opts
	return &WebsiteUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Website.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wc *WebsiteCreate) OnConflictColumns(columns ...string) *WebsiteUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WebsiteUpsertOne{
		create: wc,
	}
}

type (
	// WebsiteUpsertOne is the builder for "upsert"-ing
	//  one Website node.
	WebsiteUpsertOne struct {
		create *WebsiteCreate
	}

	// WebsiteUpsert is the "OnConflict" setter.
	WebsiteUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *WebsiteUpsert) SetCreatedAt(v time.Time) *WebsiteUpsert {
	u.Set(website.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateCreatedAt() *WebsiteUpsert {
	u.SetExcluded(website.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebsiteUpsert) SetUpdatedAt(v time.Time) *WebsiteUpsert {
	u.Set(website.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateUpdatedAt() *WebsiteUpsert {
	u.SetExcluded(website.FieldUpdatedAt)
	return u
}

// SetKey sets the "key" field.
func (u *WebsiteUpsert) SetKey(v string) *WebsiteUpsert {
	u.Set(website.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateKey() *WebsiteUpsert {
	u.SetExcluded(website.FieldKey)
	return u
}

// SetURLTemplate sets the "url_template" field.
func (u *WebsiteUpsert) SetURLTemplate(v string) *WebsiteUpsert {
	u.Set(website.FieldURLTemplate, v)
	return u
}

// UpdateURLTemplate sets the "url_template" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateURLTemplate() *WebsiteUpsert {
	u.SetExcluded(website.FieldURLTemplate)
	return u
}

// SetAllowDomains sets the "allow_domains" field.
func (u *WebsiteUpsert) SetAllowDomains(v []string) *WebsiteUpsert {
	u.Set(website.FieldAllowDomains, v)
	return u
}

// UpdateAllowDomains sets the "allow_domains" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateAllowDomains() *WebsiteUpsert {
	u.SetExcluded(website.FieldAllowDomains)
	return u
}

// ClearAllowDomains clears the value of the "allow_domains" field.
func (u *WebsiteUpsert) ClearAllowDomains() *WebsiteUpsert {
	u.SetNull(website.FieldAllowDomains)
	return u
}

// SetLatestVisitURL sets the "latest_visit_url" field.
func (u *WebsiteUpsert) SetLatestVisitURL(v string) *WebsiteUpsert {
	u.Set(website.FieldLatestVisitURL, v)
	return u
}

// UpdateLatestVisitURL sets the "latest_visit_url" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateLatestVisitURL() *WebsiteUpsert {
	u.SetExcluded(website.FieldLatestVisitURL)
	return u
}

// ClearLatestVisitURL clears the value of the "latest_visit_url" field.
func (u *WebsiteUpsert) ClearLatestVisitURL() *WebsiteUpsert {
	u.SetNull(website.FieldLatestVisitURL)
	return u
}

// SetMaxPage sets the "max_page" field.
func (u *WebsiteUpsert) SetMaxPage(v int) *WebsiteUpsert {
	u.Set(website.FieldMaxPage, v)
	return u
}

// UpdateMaxPage sets the "max_page" field to the value that was provided on create.
func (u *WebsiteUpsert) UpdateMaxPage() *WebsiteUpsert {
	u.SetExcluded(website.FieldMaxPage)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Website.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *WebsiteUpsertOne) UpdateNewValues() *WebsiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Website.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WebsiteUpsertOne) Ignore() *WebsiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebsiteUpsertOne) DoNothing() *WebsiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebsiteCreate.OnConflict
// documentation for more info.
func (u *WebsiteUpsertOne) Update(set func(*WebsiteUpsert)) *WebsiteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebsiteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WebsiteUpsertOne) SetCreatedAt(v time.Time) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateCreatedAt() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebsiteUpsertOne) SetUpdatedAt(v time.Time) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateUpdatedAt() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *WebsiteUpsertOne) SetKey(v string) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateKey() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateKey()
	})
}

// SetURLTemplate sets the "url_template" field.
func (u *WebsiteUpsertOne) SetURLTemplate(v string) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetURLTemplate(v)
	})
}

// UpdateURLTemplate sets the "url_template" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateURLTemplate() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateURLTemplate()
	})
}

// SetAllowDomains sets the "allow_domains" field.
func (u *WebsiteUpsertOne) SetAllowDomains(v []string) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetAllowDomains(v)
	})
}

// UpdateAllowDomains sets the "allow_domains" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateAllowDomains() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateAllowDomains()
	})
}

// ClearAllowDomains clears the value of the "allow_domains" field.
func (u *WebsiteUpsertOne) ClearAllowDomains() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.ClearAllowDomains()
	})
}

// SetLatestVisitURL sets the "latest_visit_url" field.
func (u *WebsiteUpsertOne) SetLatestVisitURL(v string) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetLatestVisitURL(v)
	})
}

// UpdateLatestVisitURL sets the "latest_visit_url" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateLatestVisitURL() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateLatestVisitURL()
	})
}

// ClearLatestVisitURL clears the value of the "latest_visit_url" field.
func (u *WebsiteUpsertOne) ClearLatestVisitURL() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.ClearLatestVisitURL()
	})
}

// SetMaxPage sets the "max_page" field.
func (u *WebsiteUpsertOne) SetMaxPage(v int) *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetMaxPage(v)
	})
}

// UpdateMaxPage sets the "max_page" field to the value that was provided on create.
func (u *WebsiteUpsertOne) UpdateMaxPage() *WebsiteUpsertOne {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateMaxPage()
	})
}

// Exec executes the query.
func (u *WebsiteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebsiteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebsiteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WebsiteUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WebsiteUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WebsiteCreateBulk is the builder for creating many Website entities in bulk.
type WebsiteCreateBulk struct {
	config
	builders []*WebsiteCreate
	conflict []sql.ConflictOption
}

// Save creates the Website entities in the database.
func (wcb *WebsiteCreateBulk) Save(ctx context.Context) ([]*Website, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Website, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebsiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WebsiteCreateBulk) SaveX(ctx context.Context) []*Website {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WebsiteCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WebsiteCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Website.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebsiteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (wcb *WebsiteCreateBulk) OnConflict(opts ...sql.ConflictOption) *WebsiteUpsertBulk {
	wcb.conflict = opts
	return &WebsiteUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Website.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wcb *WebsiteCreateBulk) OnConflictColumns(columns ...string) *WebsiteUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WebsiteUpsertBulk{
		create: wcb,
	}
}

// WebsiteUpsertBulk is the builder for "upsert"-ing
// a bulk of Website nodes.
type WebsiteUpsertBulk struct {
	create *WebsiteCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Website.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *WebsiteUpsertBulk) UpdateNewValues() *WebsiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Website.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WebsiteUpsertBulk) Ignore() *WebsiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebsiteUpsertBulk) DoNothing() *WebsiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebsiteCreateBulk.OnConflict
// documentation for more info.
func (u *WebsiteUpsertBulk) Update(set func(*WebsiteUpsert)) *WebsiteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebsiteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WebsiteUpsertBulk) SetCreatedAt(v time.Time) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateCreatedAt() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebsiteUpsertBulk) SetUpdatedAt(v time.Time) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateUpdatedAt() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *WebsiteUpsertBulk) SetKey(v string) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateKey() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateKey()
	})
}

// SetURLTemplate sets the "url_template" field.
func (u *WebsiteUpsertBulk) SetURLTemplate(v string) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetURLTemplate(v)
	})
}

// UpdateURLTemplate sets the "url_template" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateURLTemplate() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateURLTemplate()
	})
}

// SetAllowDomains sets the "allow_domains" field.
func (u *WebsiteUpsertBulk) SetAllowDomains(v []string) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetAllowDomains(v)
	})
}

// UpdateAllowDomains sets the "allow_domains" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateAllowDomains() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateAllowDomains()
	})
}

// ClearAllowDomains clears the value of the "allow_domains" field.
func (u *WebsiteUpsertBulk) ClearAllowDomains() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.ClearAllowDomains()
	})
}

// SetLatestVisitURL sets the "latest_visit_url" field.
func (u *WebsiteUpsertBulk) SetLatestVisitURL(v string) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetLatestVisitURL(v)
	})
}

// UpdateLatestVisitURL sets the "latest_visit_url" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateLatestVisitURL() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateLatestVisitURL()
	})
}

// ClearLatestVisitURL clears the value of the "latest_visit_url" field.
func (u *WebsiteUpsertBulk) ClearLatestVisitURL() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.ClearLatestVisitURL()
	})
}

// SetMaxPage sets the "max_page" field.
func (u *WebsiteUpsertBulk) SetMaxPage(v int) *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.SetMaxPage(v)
	})
}

// UpdateMaxPage sets the "max_page" field to the value that was provided on create.
func (u *WebsiteUpsertBulk) UpdateMaxPage() *WebsiteUpsertBulk {
	return u.Update(func(s *WebsiteUpsert) {
		s.UpdateMaxPage()
	})
}

// Exec executes the query.
func (u *WebsiteUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WebsiteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebsiteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebsiteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
