// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/panforyou/seller-finding/go/ent/seller"
)

// SellerCreate is the builder for creating a Seller entity.
type SellerCreate struct {
	config
	mutation *SellerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SellerCreate) SetCreatedAt(t time.Time) *SellerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SellerCreate) SetNillableCreatedAt(t *time.Time) *SellerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SellerCreate) SetUpdatedAt(t time.Time) *SellerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SellerCreate) SetNillableUpdatedAt(t *time.Time) *SellerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetURL sets the "url" field.
func (sc *SellerCreate) SetURL(s string) *SellerCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetKey sets the "key" field.
func (sc *SellerCreate) SetKey(s string) *SellerCreate {
	sc.mutation.SetKey(s)
	return sc
}

// SetName sets the "name" field.
func (sc *SellerCreate) SetName(s string) *SellerCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SellerCreate) SetNillableName(s *string) *SellerCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetTel sets the "tel" field.
func (sc *SellerCreate) SetTel(s string) *SellerCreate {
	sc.mutation.SetTel(s)
	return sc
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (sc *SellerCreate) SetNillableTel(s *string) *SellerCreate {
	if s != nil {
		sc.SetTel(*s)
	}
	return sc
}

// SetPrefecture sets the "prefecture" field.
func (sc *SellerCreate) SetPrefecture(s string) *SellerCreate {
	sc.mutation.SetPrefecture(s)
	return sc
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (sc *SellerCreate) SetNillablePrefecture(s *string) *SellerCreate {
	if s != nil {
		sc.SetPrefecture(*s)
	}
	return sc
}

// SetAddress sets the "address" field.
func (sc *SellerCreate) SetAddress(s string) *SellerCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sc *SellerCreate) SetNillableAddress(s *string) *SellerCreate {
	if s != nil {
		sc.SetAddress(*s)
	}
	return sc
}

// SetLatitude sets the "latitude" field.
func (sc *SellerCreate) SetLatitude(f float64) *SellerCreate {
	sc.mutation.SetLatitude(f)
	return sc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (sc *SellerCreate) SetNillableLatitude(f *float64) *SellerCreate {
	if f != nil {
		sc.SetLatitude(*f)
	}
	return sc
}

// SetLongitude sets the "longitude" field.
func (sc *SellerCreate) SetLongitude(f float64) *SellerCreate {
	sc.mutation.SetLongitude(f)
	return sc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (sc *SellerCreate) SetNillableLongitude(f *float64) *SellerCreate {
	if f != nil {
		sc.SetLongitude(*f)
	}
	return sc
}

// SetOpenedAt sets the "opened_at" field.
func (sc *SellerCreate) SetOpenedAt(t time.Time) *SellerCreate {
	sc.mutation.SetOpenedAt(t)
	return sc
}

// SetNillableOpenedAt sets the "opened_at" field if the given value is not nil.
func (sc *SellerCreate) SetNillableOpenedAt(t *time.Time) *SellerCreate {
	if t != nil {
		sc.SetOpenedAt(*t)
	}
	return sc
}

// SetExported sets the "exported" field.
func (sc *SellerCreate) SetExported(b bool) *SellerCreate {
	sc.mutation.SetExported(b)
	return sc
}

// SetExportedAt sets the "exported_at" field.
func (sc *SellerCreate) SetExportedAt(t time.Time) *SellerCreate {
	sc.mutation.SetExportedAt(t)
	return sc
}

// SetNillableExportedAt sets the "exported_at" field if the given value is not nil.
func (sc *SellerCreate) SetNillableExportedAt(t *time.Time) *SellerCreate {
	if t != nil {
		sc.SetExportedAt(*t)
	}
	return sc
}

// SetDisabled sets the "disabled" field.
func (sc *SellerCreate) SetDisabled(b bool) *SellerCreate {
	sc.mutation.SetDisabled(b)
	return sc
}

// Mutation returns the SellerMutation object of the builder.
func (sc *SellerCreate) Mutation() *SellerMutation {
	return sc.mutation
}

// Save creates the Seller in the database.
func (sc *SellerCreate) Save(ctx context.Context) (*Seller, error) {
	var (
		err  error
		node *Seller
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SellerCreate) SaveX(ctx context.Context) *Seller {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SellerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SellerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SellerCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := seller.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := seller.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SellerCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "url"`)}
	}
	if _, ok := sc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "key"`)}
	}
	if _, ok := sc.mutation.Exported(); !ok {
		return &ValidationError{Name: "exported", err: errors.New(`ent: missing required field "exported"`)}
	}
	if _, ok := sc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "disabled"`)}
	}
	return nil
}

func (sc *SellerCreate) sqlSave(ctx context.Context) (*Seller, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SellerCreate) createSpec() (*Seller, *sqlgraph.CreateSpec) {
	var (
		_node = &Seller{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: seller.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: seller.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := sc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Tel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldTel,
		})
		_node.Tel = value
	}
	if value, ok := sc.mutation.Prefecture(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldPrefecture,
		})
		_node.Prefecture = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := sc.mutation.Latitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLatitude,
		})
		_node.Latitude = value
	}
	if value, ok := sc.mutation.Longitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLongitude,
		})
		_node.Longitude = value
	}
	if value, ok := sc.mutation.OpenedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldOpenedAt,
		})
		_node.OpenedAt = value
	}
	if value, ok := sc.mutation.Exported(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seller.FieldExported,
		})
		_node.Exported = value
	}
	if value, ok := sc.mutation.ExportedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldExportedAt,
		})
		_node.ExportedAt = value
	}
	if value, ok := sc.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seller.FieldDisabled,
		})
		_node.Disabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Seller.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SellerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SellerCreate) OnConflict(opts ...sql.ConflictOption) *SellerUpsertOne {
	sc.conflict = opts
	return &SellerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Seller.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SellerCreate) OnConflictColumns(columns ...string) *SellerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SellerUpsertOne{
		create: sc,
	}
}

type (
	// SellerUpsertOne is the builder for "upsert"-ing
	//  one Seller node.
	SellerUpsertOne struct {
		create *SellerCreate
	}

	// SellerUpsert is the "OnConflict" setter.
	SellerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SellerUpsert) SetCreatedAt(v time.Time) *SellerUpsert {
	u.Set(seller.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SellerUpsert) UpdateCreatedAt() *SellerUpsert {
	u.SetExcluded(seller.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SellerUpsert) SetUpdatedAt(v time.Time) *SellerUpsert {
	u.Set(seller.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SellerUpsert) UpdateUpdatedAt() *SellerUpsert {
	u.SetExcluded(seller.FieldUpdatedAt)
	return u
}

// SetURL sets the "url" field.
func (u *SellerUpsert) SetURL(v string) *SellerUpsert {
	u.Set(seller.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SellerUpsert) UpdateURL() *SellerUpsert {
	u.SetExcluded(seller.FieldURL)
	return u
}

// SetKey sets the "key" field.
func (u *SellerUpsert) SetKey(v string) *SellerUpsert {
	u.Set(seller.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *SellerUpsert) UpdateKey() *SellerUpsert {
	u.SetExcluded(seller.FieldKey)
	return u
}

// SetName sets the "name" field.
func (u *SellerUpsert) SetName(v string) *SellerUpsert {
	u.Set(seller.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SellerUpsert) UpdateName() *SellerUpsert {
	u.SetExcluded(seller.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *SellerUpsert) ClearName() *SellerUpsert {
	u.SetNull(seller.FieldName)
	return u
}

// SetTel sets the "tel" field.
func (u *SellerUpsert) SetTel(v string) *SellerUpsert {
	u.Set(seller.FieldTel, v)
	return u
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *SellerUpsert) UpdateTel() *SellerUpsert {
	u.SetExcluded(seller.FieldTel)
	return u
}

// ClearTel clears the value of the "tel" field.
func (u *SellerUpsert) ClearTel() *SellerUpsert {
	u.SetNull(seller.FieldTel)
	return u
}

// SetPrefecture sets the "prefecture" field.
func (u *SellerUpsert) SetPrefecture(v string) *SellerUpsert {
	u.Set(seller.FieldPrefecture, v)
	return u
}

// UpdatePrefecture sets the "prefecture" field to the value that was provided on create.
func (u *SellerUpsert) UpdatePrefecture() *SellerUpsert {
	u.SetExcluded(seller.FieldPrefecture)
	return u
}

// ClearPrefecture clears the value of the "prefecture" field.
func (u *SellerUpsert) ClearPrefecture() *SellerUpsert {
	u.SetNull(seller.FieldPrefecture)
	return u
}

// SetAddress sets the "address" field.
func (u *SellerUpsert) SetAddress(v string) *SellerUpsert {
	u.Set(seller.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SellerUpsert) UpdateAddress() *SellerUpsert {
	u.SetExcluded(seller.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *SellerUpsert) ClearAddress() *SellerUpsert {
	u.SetNull(seller.FieldAddress)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *SellerUpsert) SetLatitude(v float64) *SellerUpsert {
	u.Set(seller.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *SellerUpsert) UpdateLatitude() *SellerUpsert {
	u.SetExcluded(seller.FieldLatitude)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *SellerUpsert) ClearLatitude() *SellerUpsert {
	u.SetNull(seller.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *SellerUpsert) SetLongitude(v float64) *SellerUpsert {
	u.Set(seller.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *SellerUpsert) UpdateLongitude() *SellerUpsert {
	u.SetExcluded(seller.FieldLongitude)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *SellerUpsert) ClearLongitude() *SellerUpsert {
	u.SetNull(seller.FieldLongitude)
	return u
}

// SetOpenedAt sets the "opened_at" field.
func (u *SellerUpsert) SetOpenedAt(v time.Time) *SellerUpsert {
	u.Set(seller.FieldOpenedAt, v)
	return u
}

// UpdateOpenedAt sets the "opened_at" field to the value that was provided on create.
func (u *SellerUpsert) UpdateOpenedAt() *SellerUpsert {
	u.SetExcluded(seller.FieldOpenedAt)
	return u
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (u *SellerUpsert) ClearOpenedAt() *SellerUpsert {
	u.SetNull(seller.FieldOpenedAt)
	return u
}

// SetExported sets the "exported" field.
func (u *SellerUpsert) SetExported(v bool) *SellerUpsert {
	u.Set(seller.FieldExported, v)
	return u
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *SellerUpsert) UpdateExported() *SellerUpsert {
	u.SetExcluded(seller.FieldExported)
	return u
}

// SetExportedAt sets the "exported_at" field.
func (u *SellerUpsert) SetExportedAt(v time.Time) *SellerUpsert {
	u.Set(seller.FieldExportedAt, v)
	return u
}

// UpdateExportedAt sets the "exported_at" field to the value that was provided on create.
func (u *SellerUpsert) UpdateExportedAt() *SellerUpsert {
	u.SetExcluded(seller.FieldExportedAt)
	return u
}

// ClearExportedAt clears the value of the "exported_at" field.
func (u *SellerUpsert) ClearExportedAt() *SellerUpsert {
	u.SetNull(seller.FieldExportedAt)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *SellerUpsert) SetDisabled(v bool) *SellerUpsert {
	u.Set(seller.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *SellerUpsert) UpdateDisabled() *SellerUpsert {
	u.SetExcluded(seller.FieldDisabled)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Seller.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SellerUpsertOne) UpdateNewValues() *SellerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Seller.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SellerUpsertOne) Ignore() *SellerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SellerUpsertOne) DoNothing() *SellerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SellerCreate.OnConflict
// documentation for more info.
func (u *SellerUpsertOne) Update(set func(*SellerUpsert)) *SellerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SellerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SellerUpsertOne) SetCreatedAt(v time.Time) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateCreatedAt() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SellerUpsertOne) SetUpdatedAt(v time.Time) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateUpdatedAt() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURL sets the "url" field.
func (u *SellerUpsertOne) SetURL(v string) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateURL() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateURL()
	})
}

// SetKey sets the "key" field.
func (u *SellerUpsertOne) SetKey(v string) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateKey() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *SellerUpsertOne) SetName(v string) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateName() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SellerUpsertOne) ClearName() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearName()
	})
}

// SetTel sets the "tel" field.
func (u *SellerUpsertOne) SetTel(v string) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetTel(v)
	})
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateTel() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateTel()
	})
}

// ClearTel clears the value of the "tel" field.
func (u *SellerUpsertOne) ClearTel() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearTel()
	})
}

// SetPrefecture sets the "prefecture" field.
func (u *SellerUpsertOne) SetPrefecture(v string) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetPrefecture(v)
	})
}

// UpdatePrefecture sets the "prefecture" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdatePrefecture() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdatePrefecture()
	})
}

// ClearPrefecture clears the value of the "prefecture" field.
func (u *SellerUpsertOne) ClearPrefecture() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearPrefecture()
	})
}

// SetAddress sets the "address" field.
func (u *SellerUpsertOne) SetAddress(v string) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateAddress() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *SellerUpsertOne) ClearAddress() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearAddress()
	})
}

// SetLatitude sets the "latitude" field.
func (u *SellerUpsertOne) SetLatitude(v float64) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateLatitude() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *SellerUpsertOne) ClearLatitude() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *SellerUpsertOne) SetLongitude(v float64) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateLongitude() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *SellerUpsertOne) ClearLongitude() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearLongitude()
	})
}

// SetOpenedAt sets the "opened_at" field.
func (u *SellerUpsertOne) SetOpenedAt(v time.Time) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetOpenedAt(v)
	})
}

// UpdateOpenedAt sets the "opened_at" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateOpenedAt() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateOpenedAt()
	})
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (u *SellerUpsertOne) ClearOpenedAt() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearOpenedAt()
	})
}

// SetExported sets the "exported" field.
func (u *SellerUpsertOne) SetExported(v bool) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetExported(v)
	})
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateExported() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateExported()
	})
}

// SetExportedAt sets the "exported_at" field.
func (u *SellerUpsertOne) SetExportedAt(v time.Time) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetExportedAt(v)
	})
}

// UpdateExportedAt sets the "exported_at" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateExportedAt() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateExportedAt()
	})
}

// ClearExportedAt clears the value of the "exported_at" field.
func (u *SellerUpsertOne) ClearExportedAt() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.ClearExportedAt()
	})
}

// SetDisabled sets the "disabled" field.
func (u *SellerUpsertOne) SetDisabled(v bool) *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *SellerUpsertOne) UpdateDisabled() *SellerUpsertOne {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateDisabled()
	})
}

// Exec executes the query.
func (u *SellerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SellerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SellerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SellerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SellerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SellerCreateBulk is the builder for creating many Seller entities in bulk.
type SellerCreateBulk struct {
	config
	builders []*SellerCreate
	conflict []sql.ConflictOption
}

// Save creates the Seller entities in the database.
func (scb *SellerCreateBulk) Save(ctx context.Context) ([]*Seller, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Seller, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SellerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SellerCreateBulk) SaveX(ctx context.Context) []*Seller {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SellerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SellerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Seller.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SellerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SellerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SellerUpsertBulk {
	scb.conflict = opts
	return &SellerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Seller.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SellerCreateBulk) OnConflictColumns(columns ...string) *SellerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SellerUpsertBulk{
		create: scb,
	}
}

// SellerUpsertBulk is the builder for "upsert"-ing
// a bulk of Seller nodes.
type SellerUpsertBulk struct {
	create *SellerCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Seller.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SellerUpsertBulk) UpdateNewValues() *SellerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Seller.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SellerUpsertBulk) Ignore() *SellerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SellerUpsertBulk) DoNothing() *SellerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SellerCreateBulk.OnConflict
// documentation for more info.
func (u *SellerUpsertBulk) Update(set func(*SellerUpsert)) *SellerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SellerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SellerUpsertBulk) SetCreatedAt(v time.Time) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateCreatedAt() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SellerUpsertBulk) SetUpdatedAt(v time.Time) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateUpdatedAt() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURL sets the "url" field.
func (u *SellerUpsertBulk) SetURL(v string) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateURL() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateURL()
	})
}

// SetKey sets the "key" field.
func (u *SellerUpsertBulk) SetKey(v string) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateKey() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *SellerUpsertBulk) SetName(v string) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateName() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SellerUpsertBulk) ClearName() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearName()
	})
}

// SetTel sets the "tel" field.
func (u *SellerUpsertBulk) SetTel(v string) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetTel(v)
	})
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateTel() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateTel()
	})
}

// ClearTel clears the value of the "tel" field.
func (u *SellerUpsertBulk) ClearTel() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearTel()
	})
}

// SetPrefecture sets the "prefecture" field.
func (u *SellerUpsertBulk) SetPrefecture(v string) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetPrefecture(v)
	})
}

// UpdatePrefecture sets the "prefecture" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdatePrefecture() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdatePrefecture()
	})
}

// ClearPrefecture clears the value of the "prefecture" field.
func (u *SellerUpsertBulk) ClearPrefecture() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearPrefecture()
	})
}

// SetAddress sets the "address" field.
func (u *SellerUpsertBulk) SetAddress(v string) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateAddress() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *SellerUpsertBulk) ClearAddress() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearAddress()
	})
}

// SetLatitude sets the "latitude" field.
func (u *SellerUpsertBulk) SetLatitude(v float64) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateLatitude() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *SellerUpsertBulk) ClearLatitude() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *SellerUpsertBulk) SetLongitude(v float64) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateLongitude() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *SellerUpsertBulk) ClearLongitude() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearLongitude()
	})
}

// SetOpenedAt sets the "opened_at" field.
func (u *SellerUpsertBulk) SetOpenedAt(v time.Time) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetOpenedAt(v)
	})
}

// UpdateOpenedAt sets the "opened_at" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateOpenedAt() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateOpenedAt()
	})
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (u *SellerUpsertBulk) ClearOpenedAt() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearOpenedAt()
	})
}

// SetExported sets the "exported" field.
func (u *SellerUpsertBulk) SetExported(v bool) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetExported(v)
	})
}

// UpdateExported sets the "exported" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateExported() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateExported()
	})
}

// SetExportedAt sets the "exported_at" field.
func (u *SellerUpsertBulk) SetExportedAt(v time.Time) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetExportedAt(v)
	})
}

// UpdateExportedAt sets the "exported_at" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateExportedAt() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateExportedAt()
	})
}

// ClearExportedAt clears the value of the "exported_at" field.
func (u *SellerUpsertBulk) ClearExportedAt() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.ClearExportedAt()
	})
}

// SetDisabled sets the "disabled" field.
func (u *SellerUpsertBulk) SetDisabled(v bool) *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *SellerUpsertBulk) UpdateDisabled() *SellerUpsertBulk {
	return u.Update(func(s *SellerUpsert) {
		s.UpdateDisabled()
	})
}

// Exec executes the query.
func (u *SellerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SellerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SellerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SellerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
