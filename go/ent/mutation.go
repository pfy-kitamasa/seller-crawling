// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/panforyou/seller-finding/go/ent/predicate"
	"github.com/panforyou/seller-finding/go/ent/seller"
	"github.com/panforyou/seller-finding/go/ent/website"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSeller  = "Seller"
	TypeWebsite = "Website"
)

// SellerMutation represents an operation that mutates the Seller nodes in the graph.
type SellerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	url           *string
	key           *string
	name          *string
	tel           *string
	prefecture    *string
	address       *string
	latitude      *float64
	addlatitude   *float64
	longitude     *float64
	addlongitude  *float64
	opened_at     *time.Time
	exported      *bool
	exported_at   *time.Time
	disabled      *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Seller, error)
	predicates    []predicate.Seller
}

var _ ent.Mutation = (*SellerMutation)(nil)

// sellerOption allows management of the mutation configuration using functional options.
type sellerOption func(*SellerMutation)

// newSellerMutation creates new mutation for the Seller entity.
func newSellerMutation(c config, op Op, opts ...sellerOption) *SellerMutation {
	m := &SellerMutation{
		config:        c,
		op:            op,
		typ:           TypeSeller,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSellerID sets the ID field of the mutation.
func withSellerID(id int) sellerOption {
	return func(m *SellerMutation) {
		var (
			err   error
			once  sync.Once
			value *Seller
		)
		m.oldValue = func(ctx context.Context) (*Seller, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Seller.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSeller sets the old Seller of the mutation.
func withSeller(node *Seller) sellerOption {
	return func(m *SellerMutation) {
		m.oldValue = func(context.Context) (*Seller, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SellerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SellerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SellerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *SellerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SellerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SellerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SellerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SellerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SellerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetURL sets the "url" field.
func (m *SellerMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SellerMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SellerMutation) ResetURL() {
	m.url = nil
}

// SetKey sets the "key" field.
func (m *SellerMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *SellerMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *SellerMutation) ResetKey() {
	m.key = nil
}

// SetName sets the "name" field.
func (m *SellerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SellerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *SellerMutation) ClearName() {
	m.name = nil
	m.clearedFields[seller.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *SellerMutation) NameCleared() bool {
	_, ok := m.clearedFields[seller.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *SellerMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, seller.FieldName)
}

// SetTel sets the "tel" field.
func (m *SellerMutation) SetTel(s string) {
	m.tel = &s
}

// Tel returns the value of the "tel" field in the mutation.
func (m *SellerMutation) Tel() (r string, exists bool) {
	v := m.tel
	if v == nil {
		return
	}
	return *v, true
}

// OldTel returns the old "tel" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel: %w", err)
	}
	return oldValue.Tel, nil
}

// ClearTel clears the value of the "tel" field.
func (m *SellerMutation) ClearTel() {
	m.tel = nil
	m.clearedFields[seller.FieldTel] = struct{}{}
}

// TelCleared returns if the "tel" field was cleared in this mutation.
func (m *SellerMutation) TelCleared() bool {
	_, ok := m.clearedFields[seller.FieldTel]
	return ok
}

// ResetTel resets all changes to the "tel" field.
func (m *SellerMutation) ResetTel() {
	m.tel = nil
	delete(m.clearedFields, seller.FieldTel)
}

// SetPrefecture sets the "prefecture" field.
func (m *SellerMutation) SetPrefecture(s string) {
	m.prefecture = &s
}

// Prefecture returns the value of the "prefecture" field in the mutation.
func (m *SellerMutation) Prefecture() (r string, exists bool) {
	v := m.prefecture
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefecture returns the old "prefecture" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldPrefecture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrefecture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrefecture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefecture: %w", err)
	}
	return oldValue.Prefecture, nil
}

// ClearPrefecture clears the value of the "prefecture" field.
func (m *SellerMutation) ClearPrefecture() {
	m.prefecture = nil
	m.clearedFields[seller.FieldPrefecture] = struct{}{}
}

// PrefectureCleared returns if the "prefecture" field was cleared in this mutation.
func (m *SellerMutation) PrefectureCleared() bool {
	_, ok := m.clearedFields[seller.FieldPrefecture]
	return ok
}

// ResetPrefecture resets all changes to the "prefecture" field.
func (m *SellerMutation) ResetPrefecture() {
	m.prefecture = nil
	delete(m.clearedFields, seller.FieldPrefecture)
}

// SetAddress sets the "address" field.
func (m *SellerMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SellerMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *SellerMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[seller.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *SellerMutation) AddressCleared() bool {
	_, ok := m.clearedFields[seller.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *SellerMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, seller.FieldAddress)
}

// SetLatitude sets the "latitude" field.
func (m *SellerMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *SellerMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *SellerMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *SellerMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ClearLatitude clears the value of the "latitude" field.
func (m *SellerMutation) ClearLatitude() {
	m.latitude = nil
	m.addlatitude = nil
	m.clearedFields[seller.FieldLatitude] = struct{}{}
}

// LatitudeCleared returns if the "latitude" field was cleared in this mutation.
func (m *SellerMutation) LatitudeCleared() bool {
	_, ok := m.clearedFields[seller.FieldLatitude]
	return ok
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *SellerMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
	delete(m.clearedFields, seller.FieldLatitude)
}

// SetLongitude sets the "longitude" field.
func (m *SellerMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *SellerMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *SellerMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *SellerMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongitude clears the value of the "longitude" field.
func (m *SellerMutation) ClearLongitude() {
	m.longitude = nil
	m.addlongitude = nil
	m.clearedFields[seller.FieldLongitude] = struct{}{}
}

// LongitudeCleared returns if the "longitude" field was cleared in this mutation.
func (m *SellerMutation) LongitudeCleared() bool {
	_, ok := m.clearedFields[seller.FieldLongitude]
	return ok
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *SellerMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
	delete(m.clearedFields, seller.FieldLongitude)
}

// SetOpenedAt sets the "opened_at" field.
func (m *SellerMutation) SetOpenedAt(t time.Time) {
	m.opened_at = &t
}

// OpenedAt returns the value of the "opened_at" field in the mutation.
func (m *SellerMutation) OpenedAt() (r time.Time, exists bool) {
	v := m.opened_at
	if v == nil {
		return
	}
	return *v, true
}

// OldOpenedAt returns the old "opened_at" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldOpenedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOpenedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOpenedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpenedAt: %w", err)
	}
	return oldValue.OpenedAt, nil
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (m *SellerMutation) ClearOpenedAt() {
	m.opened_at = nil
	m.clearedFields[seller.FieldOpenedAt] = struct{}{}
}

// OpenedAtCleared returns if the "opened_at" field was cleared in this mutation.
func (m *SellerMutation) OpenedAtCleared() bool {
	_, ok := m.clearedFields[seller.FieldOpenedAt]
	return ok
}

// ResetOpenedAt resets all changes to the "opened_at" field.
func (m *SellerMutation) ResetOpenedAt() {
	m.opened_at = nil
	delete(m.clearedFields, seller.FieldOpenedAt)
}

// SetExported sets the "exported" field.
func (m *SellerMutation) SetExported(b bool) {
	m.exported = &b
}

// Exported returns the value of the "exported" field in the mutation.
func (m *SellerMutation) Exported() (r bool, exists bool) {
	v := m.exported
	if v == nil {
		return
	}
	return *v, true
}

// OldExported returns the old "exported" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldExported(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExported is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExported requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExported: %w", err)
	}
	return oldValue.Exported, nil
}

// ResetExported resets all changes to the "exported" field.
func (m *SellerMutation) ResetExported() {
	m.exported = nil
}

// SetExportedAt sets the "exported_at" field.
func (m *SellerMutation) SetExportedAt(t time.Time) {
	m.exported_at = &t
}

// ExportedAt returns the value of the "exported_at" field in the mutation.
func (m *SellerMutation) ExportedAt() (r time.Time, exists bool) {
	v := m.exported_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExportedAt returns the old "exported_at" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldExportedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExportedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExportedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExportedAt: %w", err)
	}
	return oldValue.ExportedAt, nil
}

// ClearExportedAt clears the value of the "exported_at" field.
func (m *SellerMutation) ClearExportedAt() {
	m.exported_at = nil
	m.clearedFields[seller.FieldExportedAt] = struct{}{}
}

// ExportedAtCleared returns if the "exported_at" field was cleared in this mutation.
func (m *SellerMutation) ExportedAtCleared() bool {
	_, ok := m.clearedFields[seller.FieldExportedAt]
	return ok
}

// ResetExportedAt resets all changes to the "exported_at" field.
func (m *SellerMutation) ResetExportedAt() {
	m.exported_at = nil
	delete(m.clearedFields, seller.FieldExportedAt)
}

// SetDisabled sets the "disabled" field.
func (m *SellerMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *SellerMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the Seller entity.
// If the Seller object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SellerMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *SellerMutation) ResetDisabled() {
	m.disabled = nil
}

// Where appends a list predicates to the SellerMutation builder.
func (m *SellerMutation) Where(ps ...predicate.Seller) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SellerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Seller).
func (m *SellerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SellerMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, seller.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, seller.FieldUpdatedAt)
	}
	if m.url != nil {
		fields = append(fields, seller.FieldURL)
	}
	if m.key != nil {
		fields = append(fields, seller.FieldKey)
	}
	if m.name != nil {
		fields = append(fields, seller.FieldName)
	}
	if m.tel != nil {
		fields = append(fields, seller.FieldTel)
	}
	if m.prefecture != nil {
		fields = append(fields, seller.FieldPrefecture)
	}
	if m.address != nil {
		fields = append(fields, seller.FieldAddress)
	}
	if m.latitude != nil {
		fields = append(fields, seller.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, seller.FieldLongitude)
	}
	if m.opened_at != nil {
		fields = append(fields, seller.FieldOpenedAt)
	}
	if m.exported != nil {
		fields = append(fields, seller.FieldExported)
	}
	if m.exported_at != nil {
		fields = append(fields, seller.FieldExportedAt)
	}
	if m.disabled != nil {
		fields = append(fields, seller.FieldDisabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SellerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case seller.FieldCreatedAt:
		return m.CreatedAt()
	case seller.FieldUpdatedAt:
		return m.UpdatedAt()
	case seller.FieldURL:
		return m.URL()
	case seller.FieldKey:
		return m.Key()
	case seller.FieldName:
		return m.Name()
	case seller.FieldTel:
		return m.Tel()
	case seller.FieldPrefecture:
		return m.Prefecture()
	case seller.FieldAddress:
		return m.Address()
	case seller.FieldLatitude:
		return m.Latitude()
	case seller.FieldLongitude:
		return m.Longitude()
	case seller.FieldOpenedAt:
		return m.OpenedAt()
	case seller.FieldExported:
		return m.Exported()
	case seller.FieldExportedAt:
		return m.ExportedAt()
	case seller.FieldDisabled:
		return m.Disabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SellerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case seller.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case seller.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case seller.FieldURL:
		return m.OldURL(ctx)
	case seller.FieldKey:
		return m.OldKey(ctx)
	case seller.FieldName:
		return m.OldName(ctx)
	case seller.FieldTel:
		return m.OldTel(ctx)
	case seller.FieldPrefecture:
		return m.OldPrefecture(ctx)
	case seller.FieldAddress:
		return m.OldAddress(ctx)
	case seller.FieldLatitude:
		return m.OldLatitude(ctx)
	case seller.FieldLongitude:
		return m.OldLongitude(ctx)
	case seller.FieldOpenedAt:
		return m.OldOpenedAt(ctx)
	case seller.FieldExported:
		return m.OldExported(ctx)
	case seller.FieldExportedAt:
		return m.OldExportedAt(ctx)
	case seller.FieldDisabled:
		return m.OldDisabled(ctx)
	}
	return nil, fmt.Errorf("unknown Seller field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SellerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case seller.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case seller.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case seller.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case seller.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case seller.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case seller.FieldTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel(v)
		return nil
	case seller.FieldPrefecture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefecture(v)
		return nil
	case seller.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case seller.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case seller.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case seller.FieldOpenedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpenedAt(v)
		return nil
	case seller.FieldExported:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExported(v)
		return nil
	case seller.FieldExportedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExportedAt(v)
		return nil
	case seller.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	}
	return fmt.Errorf("unknown Seller field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SellerMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, seller.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, seller.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SellerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case seller.FieldLatitude:
		return m.AddedLatitude()
	case seller.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SellerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case seller.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case seller.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Seller numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SellerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(seller.FieldName) {
		fields = append(fields, seller.FieldName)
	}
	if m.FieldCleared(seller.FieldTel) {
		fields = append(fields, seller.FieldTel)
	}
	if m.FieldCleared(seller.FieldPrefecture) {
		fields = append(fields, seller.FieldPrefecture)
	}
	if m.FieldCleared(seller.FieldAddress) {
		fields = append(fields, seller.FieldAddress)
	}
	if m.FieldCleared(seller.FieldLatitude) {
		fields = append(fields, seller.FieldLatitude)
	}
	if m.FieldCleared(seller.FieldLongitude) {
		fields = append(fields, seller.FieldLongitude)
	}
	if m.FieldCleared(seller.FieldOpenedAt) {
		fields = append(fields, seller.FieldOpenedAt)
	}
	if m.FieldCleared(seller.FieldExportedAt) {
		fields = append(fields, seller.FieldExportedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SellerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SellerMutation) ClearField(name string) error {
	switch name {
	case seller.FieldName:
		m.ClearName()
		return nil
	case seller.FieldTel:
		m.ClearTel()
		return nil
	case seller.FieldPrefecture:
		m.ClearPrefecture()
		return nil
	case seller.FieldAddress:
		m.ClearAddress()
		return nil
	case seller.FieldLatitude:
		m.ClearLatitude()
		return nil
	case seller.FieldLongitude:
		m.ClearLongitude()
		return nil
	case seller.FieldOpenedAt:
		m.ClearOpenedAt()
		return nil
	case seller.FieldExportedAt:
		m.ClearExportedAt()
		return nil
	}
	return fmt.Errorf("unknown Seller nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SellerMutation) ResetField(name string) error {
	switch name {
	case seller.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case seller.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case seller.FieldURL:
		m.ResetURL()
		return nil
	case seller.FieldKey:
		m.ResetKey()
		return nil
	case seller.FieldName:
		m.ResetName()
		return nil
	case seller.FieldTel:
		m.ResetTel()
		return nil
	case seller.FieldPrefecture:
		m.ResetPrefecture()
		return nil
	case seller.FieldAddress:
		m.ResetAddress()
		return nil
	case seller.FieldLatitude:
		m.ResetLatitude()
		return nil
	case seller.FieldLongitude:
		m.ResetLongitude()
		return nil
	case seller.FieldOpenedAt:
		m.ResetOpenedAt()
		return nil
	case seller.FieldExported:
		m.ResetExported()
		return nil
	case seller.FieldExportedAt:
		m.ResetExportedAt()
		return nil
	case seller.FieldDisabled:
		m.ResetDisabled()
		return nil
	}
	return fmt.Errorf("unknown Seller field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SellerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SellerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SellerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SellerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SellerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SellerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SellerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Seller unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SellerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Seller edge %s", name)
}

// WebsiteMutation represents an operation that mutates the Website nodes in the graph.
type WebsiteMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	updated_at       *time.Time
	key              *string
	url_template     *string
	allow_domains    *[]string
	latest_visit_url *string
	max_page         *int
	addmax_page      *int
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Website, error)
	predicates       []predicate.Website
}

var _ ent.Mutation = (*WebsiteMutation)(nil)

// websiteOption allows management of the mutation configuration using functional options.
type websiteOption func(*WebsiteMutation)

// newWebsiteMutation creates new mutation for the Website entity.
func newWebsiteMutation(c config, op Op, opts ...websiteOption) *WebsiteMutation {
	m := &WebsiteMutation{
		config:        c,
		op:            op,
		typ:           TypeWebsite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebsiteID sets the ID field of the mutation.
func withWebsiteID(id int) websiteOption {
	return func(m *WebsiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Website
		)
		m.oldValue = func(ctx context.Context) (*Website, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Website.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebsite sets the old Website of the mutation.
func withWebsite(node *Website) websiteOption {
	return func(m *WebsiteMutation) {
		m.oldValue = func(context.Context) (*Website, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebsiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebsiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebsiteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *WebsiteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebsiteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebsiteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebsiteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebsiteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebsiteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetKey sets the "key" field.
func (m *WebsiteMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *WebsiteMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *WebsiteMutation) ResetKey() {
	m.key = nil
}

// SetURLTemplate sets the "url_template" field.
func (m *WebsiteMutation) SetURLTemplate(s string) {
	m.url_template = &s
}

// URLTemplate returns the value of the "url_template" field in the mutation.
func (m *WebsiteMutation) URLTemplate() (r string, exists bool) {
	v := m.url_template
	if v == nil {
		return
	}
	return *v, true
}

// OldURLTemplate returns the old "url_template" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldURLTemplate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLTemplate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLTemplate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLTemplate: %w", err)
	}
	return oldValue.URLTemplate, nil
}

// ResetURLTemplate resets all changes to the "url_template" field.
func (m *WebsiteMutation) ResetURLTemplate() {
	m.url_template = nil
}

// SetAllowDomains sets the "allow_domains" field.
func (m *WebsiteMutation) SetAllowDomains(s []string) {
	m.allow_domains = &s
}

// AllowDomains returns the value of the "allow_domains" field in the mutation.
func (m *WebsiteMutation) AllowDomains() (r []string, exists bool) {
	v := m.allow_domains
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowDomains returns the old "allow_domains" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldAllowDomains(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllowDomains is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllowDomains requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowDomains: %w", err)
	}
	return oldValue.AllowDomains, nil
}

// ClearAllowDomains clears the value of the "allow_domains" field.
func (m *WebsiteMutation) ClearAllowDomains() {
	m.allow_domains = nil
	m.clearedFields[website.FieldAllowDomains] = struct{}{}
}

// AllowDomainsCleared returns if the "allow_domains" field was cleared in this mutation.
func (m *WebsiteMutation) AllowDomainsCleared() bool {
	_, ok := m.clearedFields[website.FieldAllowDomains]
	return ok
}

// ResetAllowDomains resets all changes to the "allow_domains" field.
func (m *WebsiteMutation) ResetAllowDomains() {
	m.allow_domains = nil
	delete(m.clearedFields, website.FieldAllowDomains)
}

// SetLatestVisitURL sets the "latest_visit_url" field.
func (m *WebsiteMutation) SetLatestVisitURL(s string) {
	m.latest_visit_url = &s
}

// LatestVisitURL returns the value of the "latest_visit_url" field in the mutation.
func (m *WebsiteMutation) LatestVisitURL() (r string, exists bool) {
	v := m.latest_visit_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestVisitURL returns the old "latest_visit_url" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldLatestVisitURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatestVisitURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatestVisitURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestVisitURL: %w", err)
	}
	return oldValue.LatestVisitURL, nil
}

// ClearLatestVisitURL clears the value of the "latest_visit_url" field.
func (m *WebsiteMutation) ClearLatestVisitURL() {
	m.latest_visit_url = nil
	m.clearedFields[website.FieldLatestVisitURL] = struct{}{}
}

// LatestVisitURLCleared returns if the "latest_visit_url" field was cleared in this mutation.
func (m *WebsiteMutation) LatestVisitURLCleared() bool {
	_, ok := m.clearedFields[website.FieldLatestVisitURL]
	return ok
}

// ResetLatestVisitURL resets all changes to the "latest_visit_url" field.
func (m *WebsiteMutation) ResetLatestVisitURL() {
	m.latest_visit_url = nil
	delete(m.clearedFields, website.FieldLatestVisitURL)
}

// SetMaxPage sets the "max_page" field.
func (m *WebsiteMutation) SetMaxPage(i int) {
	m.max_page = &i
	m.addmax_page = nil
}

// MaxPage returns the value of the "max_page" field in the mutation.
func (m *WebsiteMutation) MaxPage() (r int, exists bool) {
	v := m.max_page
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxPage returns the old "max_page" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldMaxPage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMaxPage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMaxPage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxPage: %w", err)
	}
	return oldValue.MaxPage, nil
}

// AddMaxPage adds i to the "max_page" field.
func (m *WebsiteMutation) AddMaxPage(i int) {
	if m.addmax_page != nil {
		*m.addmax_page += i
	} else {
		m.addmax_page = &i
	}
}

// AddedMaxPage returns the value that was added to the "max_page" field in this mutation.
func (m *WebsiteMutation) AddedMaxPage() (r int, exists bool) {
	v := m.addmax_page
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxPage resets all changes to the "max_page" field.
func (m *WebsiteMutation) ResetMaxPage() {
	m.max_page = nil
	m.addmax_page = nil
}

// Where appends a list predicates to the WebsiteMutation builder.
func (m *WebsiteMutation) Where(ps ...predicate.Website) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WebsiteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Website).
func (m *WebsiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebsiteMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, website.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, website.FieldUpdatedAt)
	}
	if m.key != nil {
		fields = append(fields, website.FieldKey)
	}
	if m.url_template != nil {
		fields = append(fields, website.FieldURLTemplate)
	}
	if m.allow_domains != nil {
		fields = append(fields, website.FieldAllowDomains)
	}
	if m.latest_visit_url != nil {
		fields = append(fields, website.FieldLatestVisitURL)
	}
	if m.max_page != nil {
		fields = append(fields, website.FieldMaxPage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebsiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case website.FieldCreatedAt:
		return m.CreatedAt()
	case website.FieldUpdatedAt:
		return m.UpdatedAt()
	case website.FieldKey:
		return m.Key()
	case website.FieldURLTemplate:
		return m.URLTemplate()
	case website.FieldAllowDomains:
		return m.AllowDomains()
	case website.FieldLatestVisitURL:
		return m.LatestVisitURL()
	case website.FieldMaxPage:
		return m.MaxPage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebsiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case website.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case website.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case website.FieldKey:
		return m.OldKey(ctx)
	case website.FieldURLTemplate:
		return m.OldURLTemplate(ctx)
	case website.FieldAllowDomains:
		return m.OldAllowDomains(ctx)
	case website.FieldLatestVisitURL:
		return m.OldLatestVisitURL(ctx)
	case website.FieldMaxPage:
		return m.OldMaxPage(ctx)
	}
	return nil, fmt.Errorf("unknown Website field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case website.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case website.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case website.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case website.FieldURLTemplate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLTemplate(v)
		return nil
	case website.FieldAllowDomains:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowDomains(v)
		return nil
	case website.FieldLatestVisitURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestVisitURL(v)
		return nil
	case website.FieldMaxPage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxPage(v)
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebsiteMutation) AddedFields() []string {
	var fields []string
	if m.addmax_page != nil {
		fields = append(fields, website.FieldMaxPage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebsiteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case website.FieldMaxPage:
		return m.AddedMaxPage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case website.FieldMaxPage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxPage(v)
		return nil
	}
	return fmt.Errorf("unknown Website numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebsiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(website.FieldAllowDomains) {
		fields = append(fields, website.FieldAllowDomains)
	}
	if m.FieldCleared(website.FieldLatestVisitURL) {
		fields = append(fields, website.FieldLatestVisitURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebsiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebsiteMutation) ClearField(name string) error {
	switch name {
	case website.FieldAllowDomains:
		m.ClearAllowDomains()
		return nil
	case website.FieldLatestVisitURL:
		m.ClearLatestVisitURL()
		return nil
	}
	return fmt.Errorf("unknown Website nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebsiteMutation) ResetField(name string) error {
	switch name {
	case website.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case website.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case website.FieldKey:
		m.ResetKey()
		return nil
	case website.FieldURLTemplate:
		m.ResetURLTemplate()
		return nil
	case website.FieldAllowDomains:
		m.ResetAllowDomains()
		return nil
	case website.FieldLatestVisitURL:
		m.ResetLatestVisitURL()
		return nil
	case website.FieldMaxPage:
		m.ResetMaxPage()
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebsiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebsiteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebsiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebsiteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebsiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebsiteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebsiteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Website unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebsiteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Website edge %s", name)
}
