// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/panforyou/seller-finding/go/ent/seller"
)

// Seller is the model entity for the Seller schema.
type Seller struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// URL holds the value of the "url" field.
	// クローリングしたURL
	URL string `json:"url,omitempty"`
	// Key holds the value of the "key" field.
	// クローリングしたサイトで一意となるキー
	Key string `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	// 店名
	Name string `json:"name,omitempty"`
	// Tel holds the value of the "tel" field.
	// 電話番号
	Tel string `json:"tel,omitempty"`
	// Prefecture holds the value of the "prefecture" field.
	// 都道府県
	Prefecture string `json:"prefecture,omitempty"`
	// Address holds the value of the "address" field.
	// 住所
	Address string `json:"address,omitempty"`
	// Latitude holds the value of the "latitude" field.
	// 緯度
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	// 経度
	Longitude float64 `json:"longitude,omitempty"`
	// OpenedAt holds the value of the "opened_at" field.
	// オープン日
	OpenedAt time.Time `json:"opened_at,omitempty"`
	// Exported holds the value of the "exported" field.
	// 出力済み
	Exported bool `json:"exported,omitempty"`
	// ExportedAt holds the value of the "exported_at" field.
	// 出力日
	ExportedAt time.Time `json:"exported_at,omitempty"`
	// Disabled holds the value of the "disabled" field.
	// 不要フラグ
	Disabled bool `json:"disabled,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Seller) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case seller.FieldExported, seller.FieldDisabled:
			values[i] = new(sql.NullBool)
		case seller.FieldLatitude, seller.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case seller.FieldID:
			values[i] = new(sql.NullInt64)
		case seller.FieldURL, seller.FieldKey, seller.FieldName, seller.FieldTel, seller.FieldPrefecture, seller.FieldAddress:
			values[i] = new(sql.NullString)
		case seller.FieldCreatedAt, seller.FieldUpdatedAt, seller.FieldOpenedAt, seller.FieldExportedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Seller", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Seller fields.
func (s *Seller) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seller.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case seller.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case seller.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case seller.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		case seller.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				s.Key = value.String
			}
		case seller.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case seller.FieldTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel", values[i])
			} else if value.Valid {
				s.Tel = value.String
			}
		case seller.FieldPrefecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefecture", values[i])
			} else if value.Valid {
				s.Prefecture = value.String
			}
		case seller.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case seller.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				s.Latitude = value.Float64
			}
		case seller.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				s.Longitude = value.Float64
			}
		case seller.FieldOpenedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field opened_at", values[i])
			} else if value.Valid {
				s.OpenedAt = value.Time
			}
		case seller.FieldExported:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field exported", values[i])
			} else if value.Valid {
				s.Exported = value.Bool
			}
		case seller.FieldExportedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field exported_at", values[i])
			} else if value.Valid {
				s.ExportedAt = value.Time
			}
		case seller.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				s.Disabled = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Seller.
// Note that you need to call Seller.Unwrap() before calling this method if this Seller
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Seller) Update() *SellerUpdateOne {
	return (&SellerClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Seller entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Seller) Unwrap() *Seller {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Seller is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Seller) String() string {
	var builder strings.Builder
	builder.WriteString("Seller(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", url=")
	builder.WriteString(s.URL)
	builder.WriteString(", key=")
	builder.WriteString(s.Key)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", tel=")
	builder.WriteString(s.Tel)
	builder.WriteString(", prefecture=")
	builder.WriteString(s.Prefecture)
	builder.WriteString(", address=")
	builder.WriteString(s.Address)
	builder.WriteString(", latitude=")
	builder.WriteString(fmt.Sprintf("%v", s.Latitude))
	builder.WriteString(", longitude=")
	builder.WriteString(fmt.Sprintf("%v", s.Longitude))
	builder.WriteString(", opened_at=")
	builder.WriteString(s.OpenedAt.Format(time.ANSIC))
	builder.WriteString(", exported=")
	builder.WriteString(fmt.Sprintf("%v", s.Exported))
	builder.WriteString(", exported_at=")
	builder.WriteString(s.ExportedAt.Format(time.ANSIC))
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", s.Disabled))
	builder.WriteByte(')')
	return builder.String()
}

// Sellers is a parsable slice of Seller.
type Sellers []*Seller

func (s Sellers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
