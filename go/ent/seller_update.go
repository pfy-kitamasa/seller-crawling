// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/panforyou/seller-finding/go/ent/predicate"
	"github.com/panforyou/seller-finding/go/ent/seller"
)

// SellerUpdate is the builder for updating Seller entities.
type SellerUpdate struct {
	config
	hooks    []Hook
	mutation *SellerMutation
}

// Where appends a list predicates to the SellerUpdate builder.
func (su *SellerUpdate) Where(ps ...predicate.Seller) *SellerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SellerUpdate) SetUpdatedAt(t time.Time) *SellerUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetURL sets the "url" field.
func (su *SellerUpdate) SetURL(s string) *SellerUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetKey sets the "key" field.
func (su *SellerUpdate) SetKey(s string) *SellerUpdate {
	su.mutation.SetKey(s)
	return su
}

// SetName sets the "name" field.
func (su *SellerUpdate) SetName(s string) *SellerUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SellerUpdate) SetNillableName(s *string) *SellerUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *SellerUpdate) ClearName() *SellerUpdate {
	su.mutation.ClearName()
	return su
}

// SetTel sets the "tel" field.
func (su *SellerUpdate) SetTel(s string) *SellerUpdate {
	su.mutation.SetTel(s)
	return su
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (su *SellerUpdate) SetNillableTel(s *string) *SellerUpdate {
	if s != nil {
		su.SetTel(*s)
	}
	return su
}

// ClearTel clears the value of the "tel" field.
func (su *SellerUpdate) ClearTel() *SellerUpdate {
	su.mutation.ClearTel()
	return su
}

// SetPrefecture sets the "prefecture" field.
func (su *SellerUpdate) SetPrefecture(s string) *SellerUpdate {
	su.mutation.SetPrefecture(s)
	return su
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (su *SellerUpdate) SetNillablePrefecture(s *string) *SellerUpdate {
	if s != nil {
		su.SetPrefecture(*s)
	}
	return su
}

// ClearPrefecture clears the value of the "prefecture" field.
func (su *SellerUpdate) ClearPrefecture() *SellerUpdate {
	su.mutation.ClearPrefecture()
	return su
}

// SetAddress sets the "address" field.
func (su *SellerUpdate) SetAddress(s string) *SellerUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *SellerUpdate) SetNillableAddress(s *string) *SellerUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// ClearAddress clears the value of the "address" field.
func (su *SellerUpdate) ClearAddress() *SellerUpdate {
	su.mutation.ClearAddress()
	return su
}

// SetLatitude sets the "latitude" field.
func (su *SellerUpdate) SetLatitude(f float64) *SellerUpdate {
	su.mutation.ResetLatitude()
	su.mutation.SetLatitude(f)
	return su
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (su *SellerUpdate) SetNillableLatitude(f *float64) *SellerUpdate {
	if f != nil {
		su.SetLatitude(*f)
	}
	return su
}

// AddLatitude adds f to the "latitude" field.
func (su *SellerUpdate) AddLatitude(f float64) *SellerUpdate {
	su.mutation.AddLatitude(f)
	return su
}

// ClearLatitude clears the value of the "latitude" field.
func (su *SellerUpdate) ClearLatitude() *SellerUpdate {
	su.mutation.ClearLatitude()
	return su
}

// SetLongitude sets the "longitude" field.
func (su *SellerUpdate) SetLongitude(f float64) *SellerUpdate {
	su.mutation.ResetLongitude()
	su.mutation.SetLongitude(f)
	return su
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (su *SellerUpdate) SetNillableLongitude(f *float64) *SellerUpdate {
	if f != nil {
		su.SetLongitude(*f)
	}
	return su
}

// AddLongitude adds f to the "longitude" field.
func (su *SellerUpdate) AddLongitude(f float64) *SellerUpdate {
	su.mutation.AddLongitude(f)
	return su
}

// ClearLongitude clears the value of the "longitude" field.
func (su *SellerUpdate) ClearLongitude() *SellerUpdate {
	su.mutation.ClearLongitude()
	return su
}

// SetOpenedAt sets the "opened_at" field.
func (su *SellerUpdate) SetOpenedAt(t time.Time) *SellerUpdate {
	su.mutation.SetOpenedAt(t)
	return su
}

// SetNillableOpenedAt sets the "opened_at" field if the given value is not nil.
func (su *SellerUpdate) SetNillableOpenedAt(t *time.Time) *SellerUpdate {
	if t != nil {
		su.SetOpenedAt(*t)
	}
	return su
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (su *SellerUpdate) ClearOpenedAt() *SellerUpdate {
	su.mutation.ClearOpenedAt()
	return su
}

// SetExported sets the "exported" field.
func (su *SellerUpdate) SetExported(b bool) *SellerUpdate {
	su.mutation.SetExported(b)
	return su
}

// SetExportedAt sets the "exported_at" field.
func (su *SellerUpdate) SetExportedAt(t time.Time) *SellerUpdate {
	su.mutation.SetExportedAt(t)
	return su
}

// SetNillableExportedAt sets the "exported_at" field if the given value is not nil.
func (su *SellerUpdate) SetNillableExportedAt(t *time.Time) *SellerUpdate {
	if t != nil {
		su.SetExportedAt(*t)
	}
	return su
}

// ClearExportedAt clears the value of the "exported_at" field.
func (su *SellerUpdate) ClearExportedAt() *SellerUpdate {
	su.mutation.ClearExportedAt()
	return su
}

// SetDisabled sets the "disabled" field.
func (su *SellerUpdate) SetDisabled(b bool) *SellerUpdate {
	su.mutation.SetDisabled(b)
	return su
}

// Mutation returns the SellerMutation object of the builder.
func (su *SellerUpdate) Mutation() *SellerMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SellerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SellerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SellerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SellerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SellerUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := seller.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SellerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seller.Table,
			Columns: seller.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: seller.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldURL,
		})
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldKey,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldName,
		})
	}
	if su.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldName,
		})
	}
	if value, ok := su.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldTel,
		})
	}
	if su.mutation.TelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldTel,
		})
	}
	if value, ok := su.mutation.Prefecture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldPrefecture,
		})
	}
	if su.mutation.PrefectureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldPrefecture,
		})
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldAddress,
		})
	}
	if su.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldAddress,
		})
	}
	if value, ok := su.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLatitude,
		})
	}
	if value, ok := su.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLatitude,
		})
	}
	if su.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: seller.FieldLatitude,
		})
	}
	if value, ok := su.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLongitude,
		})
	}
	if value, ok := su.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLongitude,
		})
	}
	if su.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: seller.FieldLongitude,
		})
	}
	if value, ok := su.mutation.OpenedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldOpenedAt,
		})
	}
	if su.mutation.OpenedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: seller.FieldOpenedAt,
		})
	}
	if value, ok := su.mutation.Exported(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seller.FieldExported,
		})
	}
	if value, ok := su.mutation.ExportedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldExportedAt,
		})
	}
	if su.mutation.ExportedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: seller.FieldExportedAt,
		})
	}
	if value, ok := su.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seller.FieldDisabled,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seller.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerUpdateOne is the builder for updating a single Seller entity.
type SellerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SellerUpdateOne) SetUpdatedAt(t time.Time) *SellerUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetURL sets the "url" field.
func (suo *SellerUpdateOne) SetURL(s string) *SellerUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetKey sets the "key" field.
func (suo *SellerUpdateOne) SetKey(s string) *SellerUpdateOne {
	suo.mutation.SetKey(s)
	return suo
}

// SetName sets the "name" field.
func (suo *SellerUpdateOne) SetName(s string) *SellerUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableName(s *string) *SellerUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *SellerUpdateOne) ClearName() *SellerUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetTel sets the "tel" field.
func (suo *SellerUpdateOne) SetTel(s string) *SellerUpdateOne {
	suo.mutation.SetTel(s)
	return suo
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableTel(s *string) *SellerUpdateOne {
	if s != nil {
		suo.SetTel(*s)
	}
	return suo
}

// ClearTel clears the value of the "tel" field.
func (suo *SellerUpdateOne) ClearTel() *SellerUpdateOne {
	suo.mutation.ClearTel()
	return suo
}

// SetPrefecture sets the "prefecture" field.
func (suo *SellerUpdateOne) SetPrefecture(s string) *SellerUpdateOne {
	suo.mutation.SetPrefecture(s)
	return suo
}

// SetNillablePrefecture sets the "prefecture" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillablePrefecture(s *string) *SellerUpdateOne {
	if s != nil {
		suo.SetPrefecture(*s)
	}
	return suo
}

// ClearPrefecture clears the value of the "prefecture" field.
func (suo *SellerUpdateOne) ClearPrefecture() *SellerUpdateOne {
	suo.mutation.ClearPrefecture()
	return suo
}

// SetAddress sets the "address" field.
func (suo *SellerUpdateOne) SetAddress(s string) *SellerUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableAddress(s *string) *SellerUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// ClearAddress clears the value of the "address" field.
func (suo *SellerUpdateOne) ClearAddress() *SellerUpdateOne {
	suo.mutation.ClearAddress()
	return suo
}

// SetLatitude sets the "latitude" field.
func (suo *SellerUpdateOne) SetLatitude(f float64) *SellerUpdateOne {
	suo.mutation.ResetLatitude()
	suo.mutation.SetLatitude(f)
	return suo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableLatitude(f *float64) *SellerUpdateOne {
	if f != nil {
		suo.SetLatitude(*f)
	}
	return suo
}

// AddLatitude adds f to the "latitude" field.
func (suo *SellerUpdateOne) AddLatitude(f float64) *SellerUpdateOne {
	suo.mutation.AddLatitude(f)
	return suo
}

// ClearLatitude clears the value of the "latitude" field.
func (suo *SellerUpdateOne) ClearLatitude() *SellerUpdateOne {
	suo.mutation.ClearLatitude()
	return suo
}

// SetLongitude sets the "longitude" field.
func (suo *SellerUpdateOne) SetLongitude(f float64) *SellerUpdateOne {
	suo.mutation.ResetLongitude()
	suo.mutation.SetLongitude(f)
	return suo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableLongitude(f *float64) *SellerUpdateOne {
	if f != nil {
		suo.SetLongitude(*f)
	}
	return suo
}

// AddLongitude adds f to the "longitude" field.
func (suo *SellerUpdateOne) AddLongitude(f float64) *SellerUpdateOne {
	suo.mutation.AddLongitude(f)
	return suo
}

// ClearLongitude clears the value of the "longitude" field.
func (suo *SellerUpdateOne) ClearLongitude() *SellerUpdateOne {
	suo.mutation.ClearLongitude()
	return suo
}

// SetOpenedAt sets the "opened_at" field.
func (suo *SellerUpdateOne) SetOpenedAt(t time.Time) *SellerUpdateOne {
	suo.mutation.SetOpenedAt(t)
	return suo
}

// SetNillableOpenedAt sets the "opened_at" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableOpenedAt(t *time.Time) *SellerUpdateOne {
	if t != nil {
		suo.SetOpenedAt(*t)
	}
	return suo
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (suo *SellerUpdateOne) ClearOpenedAt() *SellerUpdateOne {
	suo.mutation.ClearOpenedAt()
	return suo
}

// SetExported sets the "exported" field.
func (suo *SellerUpdateOne) SetExported(b bool) *SellerUpdateOne {
	suo.mutation.SetExported(b)
	return suo
}

// SetExportedAt sets the "exported_at" field.
func (suo *SellerUpdateOne) SetExportedAt(t time.Time) *SellerUpdateOne {
	suo.mutation.SetExportedAt(t)
	return suo
}

// SetNillableExportedAt sets the "exported_at" field if the given value is not nil.
func (suo *SellerUpdateOne) SetNillableExportedAt(t *time.Time) *SellerUpdateOne {
	if t != nil {
		suo.SetExportedAt(*t)
	}
	return suo
}

// ClearExportedAt clears the value of the "exported_at" field.
func (suo *SellerUpdateOne) ClearExportedAt() *SellerUpdateOne {
	suo.mutation.ClearExportedAt()
	return suo
}

// SetDisabled sets the "disabled" field.
func (suo *SellerUpdateOne) SetDisabled(b bool) *SellerUpdateOne {
	suo.mutation.SetDisabled(b)
	return suo
}

// Mutation returns the SellerMutation object of the builder.
func (suo *SellerUpdateOne) Mutation() *SellerMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SellerUpdateOne) Select(field string, fields ...string) *SellerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Seller entity.
func (suo *SellerUpdateOne) Save(ctx context.Context) (*Seller, error) {
	var (
		err  error
		node *Seller
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SellerUpdateOne) SaveX(ctx context.Context) *Seller {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SellerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SellerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SellerUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := seller.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SellerUpdateOne) sqlSave(ctx context.Context) (_node *Seller, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seller.Table,
			Columns: seller.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: seller.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Seller.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seller.FieldID)
		for _, f := range fields {
			if !seller.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seller.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldURL,
		})
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldKey,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldName,
		})
	}
	if suo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldName,
		})
	}
	if value, ok := suo.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldTel,
		})
	}
	if suo.mutation.TelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldTel,
		})
	}
	if value, ok := suo.mutation.Prefecture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldPrefecture,
		})
	}
	if suo.mutation.PrefectureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldPrefecture,
		})
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: seller.FieldAddress,
		})
	}
	if suo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: seller.FieldAddress,
		})
	}
	if value, ok := suo.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLatitude,
		})
	}
	if value, ok := suo.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLatitude,
		})
	}
	if suo.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: seller.FieldLatitude,
		})
	}
	if value, ok := suo.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLongitude,
		})
	}
	if value, ok := suo.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: seller.FieldLongitude,
		})
	}
	if suo.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: seller.FieldLongitude,
		})
	}
	if value, ok := suo.mutation.OpenedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldOpenedAt,
		})
	}
	if suo.mutation.OpenedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: seller.FieldOpenedAt,
		})
	}
	if value, ok := suo.mutation.Exported(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seller.FieldExported,
		})
	}
	if value, ok := suo.mutation.ExportedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: seller.FieldExportedAt,
		})
	}
	if suo.mutation.ExportedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: seller.FieldExportedAt,
		})
	}
	if value, ok := suo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seller.FieldDisabled,
		})
	}
	_node = &Seller{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seller.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
