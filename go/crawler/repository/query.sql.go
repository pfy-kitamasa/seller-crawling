// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package repository

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createSeller = `-- name: CreateSeller :one
INSERT INTO "seller" ("url", "key", "name", "tel", "prefecture", "address", "longitude", "latitude", "disabled", "meta", "opened_at") VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, false, NULL, $9)
RETURNING id
`

type CreateSellerParams struct {
	Url        string
	Key        string
	Name       string
	Tel        string
	Prefecture string
	Address    string
	Longitude  float64
	Latitude   float64
	OpenedAt   time.Time
}

func (q *Queries) CreateSeller(ctx context.Context, arg CreateSellerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSeller,
		arg.Url,
		arg.Key,
		arg.Name,
		arg.Tel,
		arg.Prefecture,
		arg.Address,
		arg.Longitude,
		arg.Latitude,
		arg.OpenedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getDomainByID = `-- name: GetDomainByID :one
SELECT id, key, url, allow_domains, latest_visit_url, created_at, updated_at FROM domain WHERE key = $1 LIMIT 1
`

func (q *Queries) GetDomainByID(ctx context.Context, key string) (Domain, error) {
	row := q.db.QueryRowContext(ctx, getDomainByID, key)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Url,
		pq.Array(&i.AllowDomains),
		&i.LatestVisitUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDomainLastedVisitURL = `-- name: UpdateDomainLastedVisitURL :exec
UPDATE "domain" SET
    latest_visit_url = $2
,   updated_at = now()
WHERE key = $1
`

type UpdateDomainLastedVisitURLParams struct {
	Key            string
	LatestVisitUrl string
}

func (q *Queries) UpdateDomainLastedVisitURL(ctx context.Context, arg UpdateDomainLastedVisitURLParams) error {
	_, err := q.db.ExecContext(ctx, updateDomainLastedVisitURL, arg.Key, arg.LatestVisitUrl)
	return err
}

const updateSellerDisabled = `-- name: UpdateSellerDisabled :exec
UPDATE "seller" SET
    disabled = true
,   updated_at = now()
WHERE id = $1
`

func (q *Queries) UpdateSellerDisabled(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateSellerDisabled, id)
	return err
}

const updateSellerExported = `-- name: UpdateSellerExported :exec
UPDATE "seller" SET
    exported = true
,   exported_at = now()
WHERE id = $1
`

func (q *Queries) UpdateSellerExported(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateSellerExported, id)
	return err
}
